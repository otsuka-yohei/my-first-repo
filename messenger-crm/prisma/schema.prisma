generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEMBER
  MANAGER
  AREA_MANAGER
  SYSTEM_ADMIN
}

enum MembershipRole {
  MEMBER
  MANAGER
}

enum ConversationStatus {
  ACTIVE
  CLOSED
  ESCALATED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum CaseStatus {
  IN_PROGRESS
  RESOLVED
  ESCALATED
  ON_HOLD
}

enum CasePriority {
  HIGH
  MEDIUM
  LOW
}

enum HealthConsultationState {
  INITIAL_DETECTED
  WAITING_FOR_INTENT
  WAITING_FOR_SCHEDULE
  PROVIDING_FACILITIES
  PROVIDING_INSTRUCTIONS
  COMPLETED
}

enum SuggestionAction {
  USED_AS_IS
  USED_WITH_EDIT
  NOT_USED
}

enum TagChangeAction {
  ADDED
  REMOVED
  MODIFIED
}

model User {
  id               String               @id @default(cuid())
  email            String               @unique
  passwordHash     String
  name             String
  role             UserRole
  locale           String               @default("ja-JP")
  avatarUrl        String?
  timeZone         String?              @default("Asia/Tokyo")
  isActive         Boolean              @default(true)
  // 追加情報
  countryOfOrigin  String?              // 出身国
  dateOfBirth      DateTime?            // 生年月日
  gender           String?              // 性別
  address          String?              // 住所
  phoneNumber      String?              // 電話番号
  jobDescription   String?              // 業務内容
  hireDate         DateTime?            // 入社年月日
  notes            String?              // 備考（個別面談の内容など）
  memberships      GroupMembership[]
  conversations    Conversation[]       @relation("ConversationOwner")
  messages         Message[]
  auditLogs        AuditLog[]           @relation("AuditActor")
  suggestionUsages SuggestionUsageLog[] @relation("SuggestionUser")
  tagChanges       TagChangeLog[]       @relation("TagChangeUser")
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  groups      Group[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id             String            @id @default(cuid())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  name           String
  description    String?
  // 追加情報
  phoneNumber    String?           // グループ電話番号
  address        String?           // グループ住所
  memberships    GroupMembership[]
  conversations  Conversation[]
  isDeleted      Boolean           @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@unique([organizationId, name])
}

model GroupMembership {
  id        String         @id @default(cuid())
  group     Group          @relation(fields: [groupId], references: [id])
  groupId   String
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  role      MembershipRole
  createdAt DateTime       @default(now())

  @@unique([groupId, userId])
}

model Conversation {
  id                       String                    @id @default(cuid())
  group                    Group                     @relation(fields: [groupId], references: [id])
  groupId                  String
  worker                   User                      @relation("ConversationOwner", fields: [workerId], references: [id])
  workerId                 String
  subject                  String?
  status                   ConversationStatus        @default(ACTIVE)
  healthConsultationState  HealthConsultationState?
  healthConsultationData   Json?
  messages                 Message[]
  consultation             ConsultationCase?
  segments                 ConversationSegment[]
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
}

model Message {
  id               String               @id @default(cuid())
  conversation     Conversation         @relation(fields: [conversationId], references: [id])
  conversationId   String
  sender           User                 @relation(fields: [senderId], references: [id])
  senderId         String
  body             String
  language         String
  type             MessageType          @default(TEXT)
  contentUrl       String?
  metadata         Json?
  llmArtifact      MessageLLMArtifact?
  suggestionUsages SuggestionUsageLog[]
  createdAt        DateTime             @default(now())
}

model MessageLLMArtifact {
  id                  String   @id @default(cuid())
  message             Message  @relation(fields: [messageId], references: [id])
  messageId           String   @unique
  translation         String?
  translationLang     String?
  suggestions         Json?
  followUpSuggestions Json?
  sentiment           String?
  extra               Json?
  createdAt           DateTime @default(now())
}

model ConsultationCase {
  id             String         @id @default(cuid())
  conversation   Conversation   @relation(fields: [conversationId], references: [id])
  conversationId String         @unique
  summary        String?
  category       String
  description    String?
  status         CaseStatus     @default(IN_PROGRESS)
  priority       CasePriority   @default(MEDIUM)
  closedAt       DateTime?
  tagChanges     TagChangeLog[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ConversationSegment {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  title          String
  summary        String?
  messageIds     String[]
  startedAt      DateTime
  endedAt        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
}

model AuditLog {
  id         String   @id @default(cuid())
  actor      User?    @relation("AuditActor", fields: [actorId], references: [id])
  actorId    String?
  action     String
  entityType String
  entityId   String
  changes    Json?
  createdAt  DateTime @default(now())

  @@index([actorId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model SuggestionUsageLog {
  id                String           @id @default(cuid())
  message           Message          @relation(fields: [messageId], references: [id])
  messageId         String
  user              User             @relation("SuggestionUser", fields: [userId], references: [id])
  userId            String
  suggestionIndex   Int
  suggestionText    String
  action            SuggestionAction
  originalText      String?
  editedText        String?
  prompt            String?
  modelUsed         String?
  tokensUsed        Int?
  generationTimeMs  Int?
  createdAt         DateTime         @default(now())

  @@index([messageId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model TagChangeLog {
  id             String          @id @default(cuid())
  consultation   ConsultationCase @relation(fields: [consultationId], references: [id])
  consultationId String
  user           User            @relation("TagChangeUser", fields: [userId], references: [id])
  userId         String
  action         TagChangeAction
  tagName        String
  previousValue  String?
  newValue       String?
  isAIGenerated  Boolean         @default(false)
  createdAt      DateTime        @default(now())

  @@index([consultationId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
